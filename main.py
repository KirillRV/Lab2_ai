# lab1_lab2_final.py
import os
import warnings
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.metrics import (
    mean_squared_error, mean_absolute_error, r2_score,
    accuracy_score, precision_score, recall_score, f1_score,
    confusion_matrix, classification_report
)
import matplotlib.pyplot as plt
import seaborn as sns

warnings.filterwarnings("ignore")

# === –ü—É—Ç–∏ ===
INPUT_CSV = r'C:\Users\Kirill\PycharmProjects\lab1\train.csv'
OUT_DIR = r'C:\Users\Kirill\PycharmProjects\lab1\lab_results'
FINAL_CSV = r'C:\Users\Kirill\PycharmProjects\lab1\processed_Titanic-Dataset.csv'
os.makedirs(OUT_DIR, exist_ok=True)

# === –ó–∞–≥—Ä—É–∑–∫–∞ ===
try:
    df = pd.read_csv(INPUT_CSV)
    print("‚úÖ –î–∞—Ç–∞—Å–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:", df.shape)
except Exception as e:
    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ CSV:", e)
    raise SystemExit

# === –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∏ –≤–æ –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã ===
print("\n‚öôÔ∏è –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ –≤–æ –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
for col in df.columns:
    df.loc[df.sample(frac=0.02, random_state=42).index, col] = np.nan  # 2% NaN
print("‚úÖ –ü—Ä–æ–ø—É—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤–æ –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã.\n")

print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É —Å—Ç–æ–ª–±—Ü—É:")
print(df.isnull().sum())

# === –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ ===
def extract_deck(cabin):
    if pd.isna(cabin): return 'Unknown'
    return str(cabin)[0]

def extract_title(name):
    if pd.isna(name): return 'Unknown'
    parts = str(name).split(',')
    if len(parts) > 1:
        return parts[1].split('.')[0].strip()
    return 'Unknown'

df['Deck'] = df['Cabin'].apply(extract_deck)
df['Title'] = df['Name'].apply(extract_title)

# === –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ ===
print("\n‚öôÔ∏è –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏...")
num_cols = df.select_dtypes(include=[np.number]).columns.tolist()
cat_cols = df.select_dtypes(exclude=[np.number]).columns.tolist()

for c in num_cols:
    try:
        median = df[c].median()
        df[c] = df[c].fillna(median)
        print(f"  –ß–∏—Å–ª–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ {c} ‚Üí –º–µ–¥–∏–∞–Ω–∞ = {median}")
    except Exception as e:
        print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —á–∏—Å–ª–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏ {c}: {e}")

for c in cat_cols:
    try:
        mode = df[c].mode(dropna=True)
        fill = mode[0] if not mode.empty else 'Unknown'
        df[c] = df[c].fillna(fill)
        print(f"  –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ {c} ‚Üí –º–æ–¥–∞ = {fill}")
    except Exception as e:
        print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏ {c}: {e}")

print("\n‚úÖ –ü—Ä–æ–ø—É—Å–∫–∏ –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è:")
print(df.isnull().sum())

# === –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ===
print("\n‚öôÔ∏è –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ (MinMax [0,1])...")
scaler = MinMaxScaler()
num_all = df.select_dtypes(include=[np.number]).columns
try:
    df[num_all] = scaler.fit_transform(df[num_all])
    print("‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
except Exception as e:
    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:", e)

# === One-Hot Encoding –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ===
print("\n‚öôÔ∏è –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ —á–∏—Å–ª–æ–≤—ã–µ (OHE)...")
for_ohe = [c for c in cat_cols if c not in ['Name','Ticket','Cabin']]
try:
    df = pd.get_dummies(df, columns=for_ohe, drop_first=False)
    print("‚úÖ OHE –∑–∞–≤–µ—Ä—à—ë–Ω. –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å:", df.shape)
except Exception as e:
    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ OHE:", e)

# === –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç ===
processed_path = os.path.join(OUT_DIR, 'processed_Titanic-Dataset_full.csv')
try:
    df.to_csv(processed_path, index=False)
    print(f"\nüíæ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {processed_path}")
except Exception as e:
    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞:", e)

# === –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (–∫–∞–∫ –≤ —Ç–≤–æ–µ–π –ø–µ—Ä–≤–æ–π –ª–∞–±–µ) ===
try:
    df.to_csv(FINAL_CSV, index=False)
    print(f"üíæ –ò—Ç–æ–≥–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫: '{FINAL_CSV}'")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ CSV: {e}")

# === –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è –õ–†2 ===
if 'Survived' not in df.columns or 'Fare' not in df.columns:
    raise SystemExit("‚ùå –ù–µ—Ç –∫–æ–ª–æ–Ω–æ–∫ Survived/Fare –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –õ–†2.")

X = df.drop(['Survived', 'Fare'], axis=1)
y_clf = df['Survived']
y_reg = df['Fare']

X_train, X_test, y_train_clf, y_test_clf = train_test_split(X, y_clf, test_size=0.3, random_state=42, stratify=y_clf)
X_train_reg, X_test_reg, y_train_reg, y_test_reg = train_test_split(X, y_reg, test_size=0.3, random_state=42)

print("\n‚úÖ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
print("Train:", X_train.shape, "Test:", X_test.shape)

# === –†–µ–≥—Ä–µ—Å—Å–∏—è (Fare) ===
print("\nüìà –ó–∞–¥–∞—á–∞ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ (–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ Fare)")
try:
    reg = LinearRegression()
    reg.fit(X_train_reg, y_train_reg)
    y_pred_reg = reg.predict(X_test_reg)

    mse = mean_squared_error(y_test_reg, y_pred_reg)
    mae = mean_absolute_error(y_test_reg, y_pred_reg)
    rmse = np.sqrt(mse)
    r2 = r2_score(y_test_reg, y_pred_reg)

    print(f"  MSE={mse:.4f}, MAE={mae:.4f}, RMSE={rmse:.4f}, R2={r2:.4f}")

    plt.figure(figsize=(6,6))
    plt.scatter(y_test_reg, y_pred_reg, alpha=0.6)
    plt.plot([0,1],[0,1],'--', color='red')
    plt.title('Regression: Actual vs Predicted (Fare)')
    plt.xlabel('Actual')
    plt.ylabel('Predicted')
    plt.savefig(os.path.join(OUT_DIR, 'regression_plot.png'))
    plt.close()
except Exception as e:
    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏:", e)

# === –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è (Survived) ===
print("\nü§ñ –ó–∞–¥–∞—á–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ Survived)")
try:
    clf = LogisticRegression(max_iter=1000, solver='liblinear')
    clf.fit(X_train, y_train_clf)
    y_pred_clf = clf.predict(X_test)

    acc = accuracy_score(y_test_clf, y_pred_clf)
    prec = precision_score(y_test_clf, y_pred_clf, zero_division=0)
    rec = recall_score(y_test_clf, y_pred_clf, zero_division=0)
    f1 = f1_score(y_test_clf, y_pred_clf, zero_division=0)

    print(f"  Accuracy={acc:.4f}, Precision={prec:.4f}, Recall={rec:.4f}, F1={f1:.4f}")

    cm = confusion_matrix(y_test_clf, y_pred_clf)
    plt.figure(figsize=(5,4))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
    plt.title('Confusion Matrix (Survived)')
    plt.ylabel('True')
    plt.xlabel('Predicted')
    plt.savefig(os.path.join(OUT_DIR, 'confusion_matrix.png'))
    plt.close()
except Exception as e:
    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:", e)

# === –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç ===
with open(os.path.join(OUT_DIR, 'summary.txt'), 'w', encoding='utf-8') as f:
    f.write("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ 1 –∏ 2 ‚Äî Titanic Dataset\n")
    f.write("–í—Å–µ —Å—Ç–æ–ª–±—Ü—ã —Å–æ–¥–µ—Ä–∂–∞–ª–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ (NaN), –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n")
    f.write("–í—ã–ø–æ–ª–Ω–µ–Ω—ã –∑–∞–¥–∞—á–∏ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.\n")
    f.write("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ lab_results –∏ processed_Titanic-Dataset.csv\n")

print("\nüìÑ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ summary.txt")
print("‚úÖ –†–∞–±–æ—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ‚Äî –≤ –ø–∞–ø–∫–µ lab_results/ –∏ processed_Titanic-Dataset.csv")
